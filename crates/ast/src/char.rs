#[derive(Debug)]
pub enum CharacterCodes {
    Ampersand,
    Asterisk,
    At,
    Backslash,
    Backtick,
    Bar,
    Caret,
    CloseBrace,
    CloseBracket,
    CloseParen,
    Colon,
    Comma,
    Dot,
    DoubleQuote,
    Equals,
    Exclamation,
    GreaterThan,
    Hash,
    LessThan,
    Minus,
    OpenBrace,
    OpenBracket,
    OpenParen,
    Percent,
    Plus,
    Question,
    Semicolon,
    SingleQuote,
    Slash,
    Tilde,
    Backspace,
    FormFeed,
    Numeric,
    Alphabetic,
    // ByteOrderMark,
    Tab,
    VerticalTab,
    Unknown,
}

impl From<u8> for CharacterCodes {
    fn from(byte: u8) -> Self {
        match byte {
            b'a'..=b'z' | b'A'..=b'Z' => CharacterCodes::Alphabetic,
            b'0'..=b'9' => CharacterCodes::Numeric,
            b'&' => CharacterCodes::Ampersand,
            b'*' => CharacterCodes::Asterisk,
            b'@' => CharacterCodes::At,
            b'\\' => CharacterCodes::Backslash,
            b'`' => CharacterCodes::Backtick,
            b'|' => CharacterCodes::Bar,
            b'^' => CharacterCodes::Caret,
            b'}' => CharacterCodes::CloseBrace,
            b']' => CharacterCodes::CloseBracket,
            b')' => CharacterCodes::CloseParen,
            b':' => CharacterCodes::Colon,
            b',' => CharacterCodes::Comma,
            b'.' => CharacterCodes::Dot,
            b'"' => CharacterCodes::DoubleQuote,
            b'=' => CharacterCodes::Equals,
            b'!' => CharacterCodes::Exclamation,
            b'>' => CharacterCodes::GreaterThan,
            b'#' => CharacterCodes::Hash,
            b'<' => CharacterCodes::LessThan,
            b'-' => CharacterCodes::Minus,
            b'{' => CharacterCodes::OpenBrace,
            b'[' => CharacterCodes::OpenBracket,
            b'(' => CharacterCodes::OpenParen,
            b'%' => CharacterCodes::Percent,
            b'+' => CharacterCodes::Plus,
            b'?' => CharacterCodes::Question,
            b';' => CharacterCodes::Semicolon,
            b'\'' => CharacterCodes::SingleQuote,
            b'/' => CharacterCodes::Slash,
            b'~' => CharacterCodes::Tilde,
            b' ' => CharacterCodes::Backspace,
            0x0C => CharacterCodes::FormFeed,
            0x09 => CharacterCodes::Tab,
            0x0B => CharacterCodes::VerticalTab,
            _ => CharacterCodes::Unknown,
        }
    }
}
